openapi: 3.0.3
info:
  title: KRX Stock Market API
  description: |
    한국 주식 시장 데이터 조회 및 사용자 인증을 위한 REST API

    ## 주요 기능
    - 사용자 인증 (로그인/회원가입)
    - KOSPI/KOSDAQ 상장 종목 조회
    - 개별 종목 상세 정보 및 가격 이력 조회
    - 52주 통계 정보 조회
    - 오늘의 공시 및 뉴스 조회

  version: 1.0.0
  contact:
    name: API Support
    email: support@krx-api.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.krx-market.com/v1
    description: Production server
  - url: https://staging-api.krx-market.com/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Development server

tags:
  - name: Authentication
    description: 사용자 인증 관련 엔드포인트
  - name: Market
    description: 시장 현황 및 상장 종목 조회
  - name: Stock
    description: 개별 종목 상세 정보
  - name: Disclosure
    description: 공시 정보
  - name: News
    description: 뉴스 정보

paths:
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: 회원가입
      description: 새로운 사용자 계정을 생성합니다
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
            examples:
              example1:
                summary: 회원가입 예시
                value:
                  user_id: johndoe
                  password: SecurePass123!
                  password_confirm: SecurePass123!
                  email: john@example.com
                  name: 홍길동
                  agree: true
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
              examples:
                success:
                  value:
                    success: true
                    message: 회원가입이 완료되었습니다
                    user_id: johndoe
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_fields:
                  value:
                    success: false
                    error: BAD_REQUEST
                    message: 모든 필드를 입력해주세요
                password_mismatch:
                  value:
                    success: false
                    error: PASSWORD_MISMATCH
                    message: 비밀번호가 일치하지 않습니다
                no_agreement:
                  value:
                    success: false
                    error: AGREEMENT_REQUIRED
                    message: 이용약관에 동의해주세요
        '409':
          description: 중복된 사용자 아이디
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                duplicate:
                  value:
                    success: false
                    error: USER_EXISTS
                    message: 이미 존재하는 아이디입니다
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: 로그인
      description: 사용자 인증 후 액세스 토큰을 발급합니다
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              example1:
                value:
                  user_id: johndoe
                  password: SecurePass123!
                  remember_me: true
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  value:
                    success: true
                    message: 로그인 성공
                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    token_type: Bearer
                    expires_in: 3600
                    user:
                      user_id: johndoe
                      name: 홍길동
                      email: john@example.com
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_credentials:
                  value:
                    success: false
                    error: BAD_REQUEST
                    message: 아이디와 비밀번호를 모두 입력해주세요
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_credentials:
                  value:
                    success: false
                    error: UNAUTHORIZED
                    message: 아이디 또는 비밀번호가 올바르지 않습니다
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: 로그아웃
      description: 현재 세션을 종료하고 토큰을 무효화합니다
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 로그아웃되었습니다
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /market/listings:
    get:
      tags:
        - Market
      summary: 상장 종목 목록 조회
      description: KOSPI, KOSDAQ, KONEX 시장의 상장 종목 목록을 조회합니다
      operationId: getMarketListings
      security:
        - BearerAuth: []
      parameters:
        - name: market
          in: query
          description: 시장 구분 (KRX, KOSPI, KOSDAQ, KONEX)
          required: false
          schema:
            type: string
            enum: [KRX, KOSPI, KOSDAQ, KONEX]
            default: KRX
        - name: sort_by
          in: query
          description: 정렬 기준
          required: false
          schema:
            type: string
            enum: [marcap, name, close, changes_ratio]
            default: marcap
        - name: order
          in: query
          description: 정렬 순서
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: limit
          in: query
          description: 조회할 종목 수
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: 페이지네이션 오프셋
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        description: 전체 종목 수
                        example: 2500
                      limit:
                        type: integer
                        example: 20
                      offset:
                        type: integer
                        example: 0
                      stocks:
                        type: array
                        items:
                          $ref: '#/components/schemas/StockListing'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /stock/{ticker}:
    get:
      tags:
        - Stock
      summary: 종목 상세 정보 조회
      description: 특정 종목의 상세 정보를 조회합니다
      operationId: getStockDetail
      security:
        - BearerAuth: []
      parameters:
        - name: ticker
          in: path
          description: 종목 코드
          required: true
          schema:
            type: string
            example: "005930"
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/StockDetail'
        '404':
          description: 종목을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                not_found:
                  value:
                    success: false
                    error: NOT_FOUND
                    message: 해당 종목을 찾을 수 없습니다
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /stock/{ticker}/history:
    get:
      tags:
        - Stock
      summary: 종목 가격 이력 조회
      description: 특정 기간 동안의 종목 가격 이력을 조회합니다
      operationId: getStockHistory
      security:
        - BearerAuth: []
      parameters:
        - name: ticker
          in: path
          description: 종목 코드
          required: true
          schema:
            type: string
            example: "005930"
        - name: start_date
          in: query
          description: 시작일 (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
            example: "2023-01-01"
        - name: end_date
          in: query
          description: 종료일 (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: interval
          in: query
          description: 데이터 간격
          required: false
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: daily
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      ticker:
                        type: string
                        example: "005930"
                      name:
                        type: string
                        example: 삼성전자
                      period:
                        type: object
                        properties:
                          start:
                            type: string
                            format: date
                            example: "2023-01-01"
                          end:
                            type: string
                            format: date
                            example: "2024-01-01"
                      prices:
                        type: array
                        items:
                          $ref: '#/components/schemas/PriceHistory'
        '404':
          description: 종목을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /stock/{ticker}/statistics:
    get:
      tags:
        - Stock
      summary: 종목 통계 정보 조회
      description: 52주 최고가, 최저가, 평균가 등의 통계 정보를 조회합니다
      operationId: getStockStatistics
      security:
        - BearerAuth: []
      parameters:
        - name: ticker
          in: path
          description: 종목 코드
          required: true
          schema:
            type: string
            example: "005930"
        - name: period
          in: query
          description: 통계 기간 (weeks)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 260
            default: 52
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/StockStatistics'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /stock/search:
    get:
      tags:
        - Stock
      summary: 종목 검색
      description: 종목명 또는 종목코드로 검색합니다
      operationId: searchStock
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          description: 검색어 (종목명 또는 종목코드)
          required: true
          schema:
            type: string
            example: 삼성전자
        - name: limit
          in: query
          description: 결과 개수 제한
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: 검색 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      query:
                        type: string
                        example: 삼성전자
                      count:
                        type: integer
                        example: 2
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/StockListing'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_query:
                  value:
                    success: false
                    error: BAD_REQUEST
                    message: 검색어를 입력해주세요
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /disclosure/today:
    get:
      tags:
        - Disclosure
      summary: 오늘의 공시 조회
      description: 오늘 등록된 공시 목록을 조회합니다
      operationId: getTodayDisclosure
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: 페이지당 항목 수
          required: false
          schema:
            type: integer
            minimum: 10
            maximum: 100
            default: 20
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date
                        example: "2024-01-15"
                      total:
                        type: integer
                        example: 150
                      page:
                        type: integer
                        example: 1
                      per_page:
                        type: integer
                        example: 20
                      disclosures:
                        type: array
                        items:
                          $ref: '#/components/schemas/Disclosure'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /news/today:
    get:
      tags:
        - News
      summary: 오늘의 뉴스 조회
      description: 오늘의 주식 관련 뉴스를 조회합니다
      operationId: getTodayNews
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: 페이지당 항목 수
          required: false
          schema:
            type: integer
            minimum: 10
            maximum: 100
            default: 20
        - name: category
          in: query
          description: 뉴스 카테고리
          required: false
          schema:
            type: string
            enum: [all, market, company, economy, global]
            default: all
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      date:
                        type: string
                        format: date
                        example: "2024-01-15"
                      total:
                        type: integer
                        example: 50
                      page:
                        type: integer
                        example: 1
                      per_page:
                        type: integer
                        example: 20
                      news:
                        type: array
                        items:
                          $ref: '#/components/schemas/News'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT 토큰을 사용한 인증. 로그인 후 발급받은 토큰을 사용합니다.

  schemas:
    SignupRequest:
      type: object
      required:
        - user_id
        - password
        - password_confirm
        - email
        - name
        - agree
      properties:
        user_id:
          type: string
          minLength: 4
          maxLength: 20
          pattern: '^[a-zA-Z0-9_]+$'
          description: 사용자 아이디 (영문, 숫자, 언더스코어만 가능)
          example: johndoe
        password:
          type: string
          minLength: 8
          maxLength: 50
          format: password
          description: 비밀번호 (최소 8자 이상)
          example: SecurePass123!
        password_confirm:
          type: string
          format: password
          description: 비밀번호 확인
          example: SecurePass123!
        email:
          type: string
          format: email
          description: 이메일 주소
          example: john@example.com
        name:
          type: string
          minLength: 2
          maxLength: 50
          description: 사용자 이름
          example: 홍길동
        agree:
          type: boolean
          description: 이용약관 및 개인정보처리방침 동의
          example: true

    SignupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 회원가입이 완료되었습니다
        user_id:
          type: string
          example: johndoe

    LoginRequest:
      type: object
      required:
        - user_id
        - password
      properties:
        user_id:
          type: string
          description: 사용자 아이디
          example: johndoe
        password:
          type: string
          format: password
          description: 비밀번호
          example: SecurePass123!
        remember_me:
          type: boolean
          description: 로그인 상태 유지
          default: false
          example: true

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 로그인 성공
        access_token:
          type: string
          description: JWT 액세스 토큰
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token:
          type: string
          description: JWT 리프레시 토큰
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          description: 토큰 만료 시간 (초)
          example: 3600
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        user_id:
          type: string
          example: johndoe
        name:
          type: string
          example: 홍길동
        email:
          type: string
          format: email
          example: john@example.com

    StockListing:
      type: object
      properties:
        code:
          type: string
          description: 종목 코드
          example: "005930"
        name:
          type: string
          description: 종목명
          example: 삼성전자
        market:
          type: string
          description: 시장 구분
          enum: [KOSPI, KOSDAQ, KONEX]
          example: KOSPI
        close:
          type: number
          format: float
          description: 현재가 (원)
          example: 71000
        changes_ratio:
          type: number
          format: float
          description: 등락률 (%)
          example: 1.43
        open:
          type: number
          format: float
          description: 시가 (원)
          example: 70500
        high:
          type: number
          format: float
          description: 고가 (원)
          example: 71500
        low:
          type: number
          format: float
          description: 저가 (원)
          example: 70300
        volume:
          type: integer
          format: int64
          description: 거래량
          example: 12345678
        marcap:
          type: integer
          format: int64
          description: 시가총액 (백만원)
          example: 423000000

    StockDetail:
      allOf:
        - $ref: '#/components/schemas/StockListing'
        - type: object
          properties:
            sector:
              type: string
              description: 업종
              example: 전기전자
            listed_shares:
              type: integer
              format: int64
              description: 상장 주식 수
              example: 5969782550
            description:
              type: string
              description: 종목 설명
              example: 반도체, 디스플레이, IT 제품 제조 및 판매

    PriceHistory:
      type: object
      properties:
        date:
          type: string
          format: date
          description: 날짜
          example: "2023-12-01"
        open:
          type: number
          format: float
          description: 시가 (원)
          example: 70000
        high:
          type: number
          format: float
          description: 고가 (원)
          example: 71000
        low:
          type: number
          format: float
          description: 저가 (원)
          example: 69500
        close:
          type: number
          format: float
          description: 종가 (원)
          example: 70500
        volume:
          type: integer
          format: int64
          description: 거래량
          example: 10000000
        change:
          type: number
          format: float
          description: 전일대비 (원)
          example: 500

    StockStatistics:
      type: object
      properties:
        ticker:
          type: string
          example: "005930"
        name:
          type: string
          example: 삼성전자
        period:
          type: object
          properties:
            weeks:
              type: integer
              example: 52
            start_date:
              type: string
              format: date
              example: "2023-01-15"
            end_date:
              type: string
              format: date
              example: "2024-01-15"
        current_price:
          type: number
          format: float
          description: 현재가 (원)
          example: 71000
        week_52_high:
          type: number
          format: float
          description: 52주 최고가 (원)
          example: 75000
        week_52_high_date:
          type: string
          format: date
          description: 52주 최고가 달성일
          example: "2023-11-15"
        week_52_low:
          type: number
          format: float
          description: 52주 최저가 (원)
          example: 60000
        week_52_low_date:
          type: string
          format: date
          description: 52주 최저가 달성일
          example: "2023-03-20"
        week_52_avg:
          type: number
          format: float
          description: 52주 평균가 (원)
          example: 68500
        high_ratio:
          type: number
          format: float
          description: 최고가 대비 현재가 비율 (%)
          example: -5.33
        low_ratio:
          type: number
          format: float
          description: 최저가 대비 현재가 비율 (%)
          example: 18.33
        avg_ratio:
          type: number
          format: float
          description: 평균가 대비 현재가 비율 (%)
          example: 3.65
        year_change:
          type: number
          format: float
          description: 연간 변동액 (원)
          example: 5000
        year_change_ratio:
          type: number
          format: float
          description: 연간 변동률 (%)
          example: 7.58

    Disclosure:
      type: object
      properties:
        id:
          type: string
          description: 공시 ID
          example: "20240115000123"
        company_code:
          type: string
          description: 종목 코드
          example: "005930"
        company_name:
          type: string
          description: 회사명
          example: 삼성전자
        title:
          type: string
          description: 공시 제목
          example: 주요사항보고서(자기주식취득결정)
        submitted_at:
          type: string
          format: date-time
          description: 제출 일시
          example: "2024-01-15T14:30:00Z"
        url:
          type: string
          format: uri
          description: 공시 상세 URL
          example: https://dart.fss.or.kr/dsaf001/main.do?rcpNo=20240115000123

    News:
      type: object
      properties:
        id:
          type: string
          description: 뉴스 ID
          example: "news_20240115_001"
        title:
          type: string
          description: 뉴스 제목
          example: 삼성전자, 4분기 실적 시장 예상치 상회
        summary:
          type: string
          description: 뉴스 요약
          example: 삼성전자가 4분기 영업이익이 시장 예상을 상회했다고 발표했다...
        category:
          type: string
          description: 카테고리
          enum: [market, company, economy, global]
          example: company
        published_at:
          type: string
          format: date-time
          description: 발행 일시
          example: "2024-01-15T09:00:00Z"
        source:
          type: string
          description: 출처
          example: 한국경제신문
        url:
          type: string
          format: uri
          description: 뉴스 URL
          example: https://example.com/news/001
        thumbnail:
          type: string
          format: uri
          nullable: true
          description: 썸네일 이미지 URL
          example: https://example.com/images/thumb_001.jpg

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: 에러 코드
          example: BAD_REQUEST
        message:
          type: string
          description: 에러 메시지
          example: 잘못된 요청입니다
        details:
          type: object
          description: 추가 에러 정보 (선택사항)
          nullable: true
          additionalProperties: true

  responses:
    BadRequestError:
      description: 잘못된 요청
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            bad_request:
              value:
                success: false
                error: BAD_REQUEST
                message: 잘못된 요청입니다

    UnauthorizedError:
      description: 인증 실패
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            unauthorized:
              value:
                success: false
                error: UNAUTHORIZED
                message: 인증이 필요합니다
            invalid_token:
              value:
                success: false
                error: INVALID_TOKEN
                message: 유효하지 않은 토큰입니다
            expired_token:
              value:
                success: false
                error: EXPIRED_TOKEN
                message: 토큰이 만료되었습니다

    NotFoundError:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            not_found:
              value:
                success: false
                error: NOT_FOUND
                message: 요청한 리소스를 찾을 수 없습니다

    InternalServerError:
      description: 서버 내부 오류
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            internal_error:
              value:
                success: false
                error: INTERNAL_SERVER_ERROR
                message: 서버 내부 오류가 발생했습니다

security:
  - BearerAuth: []
